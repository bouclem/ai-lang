# Exemple de modèle d'apprentissage automatique en ai'lang
# Démonstration des fonctionnalités IA intégrées

# Import des bibliothèques IA (intégrées nativement)
import ml
import data

# Création d'un dataset
dataset iris_data from "iris.csv" {
    features: ["sepal_length", "sepal_width", "petal_length", "petal_width"]
    target: "species"
    split: 0.8  # 80% pour l'entraînement
}

print(f"Dataset chargé: {iris_data.size} échantillons")

# Définition d'un modèle de classification
model iris_classifier {
    type: "neural_network"
    layers: [
        {"type": "dense", "units": 10, "activation": "relu"},
        {"type": "dense", "units": 8, "activation": "relu"},
        {"type": "dense", "units": 3, "activation": "softmax"}
    ]
    optimizer: "adam"
    loss: "categorical_crossentropy"
    metrics: ["accuracy"]
}

print("Modèle défini avec succès")

# Préparation des données
X_train, X_test, y_train, y_test = iris_data.split()

# Normalisation des données (fonctionnalité intégrée)
X_train = data.normalize(X_train)
X_test = data.normalize(X_test)

# Encodage des labels
y_train = data.one_hot_encode(y_train)
y_test = data.one_hot_encode(y_test)

print("Données préparées")

# Entraînement du modèle
train iris_classifier on X_train, y_train {
    epochs: 100
    batch_size: 32
    validation_split: 0.2
    verbose: True
}

print("Entraînement terminé")

# Évaluation du modèle
accuracy = iris_classifier.evaluate(X_test, y_test)
print(f"Précision sur les données de test: {accuracy:.2%}")

# Prédictions
predict predictions from iris_classifier on X_test

# Affichage des résultats
for i in range(min(5, len(predictions))):
    predicted_class = data.decode_one_hot(predictions[i])
    actual_class = data.decode_one_hot(y_test[i])
    print(f"Échantillon {i+1}: Prédit={predicted_class}, Réel={actual_class}")

# Sauvegarde du modèle
iris_classifier.save("iris_model.ailang")
print("Modèle sauvegardé")

# Fonction pour faire des prédictions sur de nouvelles données
def predict_species(sepal_length, sepal_width, petal_length, petal_width):
    # Création d'un tenseur avec les nouvelles données
    new_data = tensor([[sepal_length, sepal_width, petal_length, petal_width]], dtype="float32")
    
    # Normalisation
    new_data = data.normalize(new_data)
    
    # Prédiction
    predict result from iris_classifier on new_data
    
    # Décodage du résultat
    species = data.decode_one_hot(result[0])
    confidence = max(result[0])
    
    return species, confidence

# Test de la fonction de prédiction
species, confidence = predict_species(5.1, 3.5, 1.4, 0.2)
print(f"\nPrédiction pour une nouvelle fleur:")
print(f"Espèce: {species}")
print(f"Confiance: {confidence:.2%}")

# Analyse des performances
print("\nAnalyse des performances:")
print(f"Temps d'entraînement: {iris_classifier.training_time}s")
print(f"Nombre de paramètres: {iris_classifier.param_count}")
print(f"Taille du modèle: {iris_classifier.model_size}MB")

print("\nExemple terminé avec succès!")